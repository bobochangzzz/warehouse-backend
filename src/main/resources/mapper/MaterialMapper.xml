<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bobochang.warehouse.mapper.MaterialMapper">

    <resultMap id="BaseResultMap" type="com.bobochang.warehouse.entity.Material">
            <id property="materialId" column="material_id" jdbcType="INTEGER"/>
            <result property="storeId" column="store_id" jdbcType="INTEGER"/>
            <result property="materialName" column="material_name" jdbcType="VARCHAR"/>
            <result property="materialNum" column="material_num" jdbcType="VARCHAR"/>
            <result property="unit" column="unit" jdbcType="INTEGER"/>
            <result property="introduce" column="introduce" jdbcType="VARCHAR"/>
            <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
            <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
            <result property="createBy" column="create_by" jdbcType="INTEGER"/>
            <result property="updateBy" column="update_by" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        material_id,store_id,material_name,
        material_num,unit,introduce,
        create_time,update_time,create_by,
        update_by
    </sql>

    <!--
      //查询商品总行数的方法
      public int selectProductCount(Product product)
    -->
    <select id="selectProductCount" resultType="integer">
        select count(*) from
        product t1, store t2, supply t5
        where t1.store_id = t2.store_id
        and t1.supply_id = t5.supply_id
        and t1.unit_id = t7.unit_id
        <if test="storeId != null">
            and t1.store_id = #{storeId}
        </if>
        <if test="productName != null and productName != ''">
            and t1.product_name like concat('%',#{productName},'%')
        </if>
        <if test="supplyName != null and supplyName != ''">
            and t5.supply_name like concat('%', #{supplyName}, '%')
        </if>
        <if test="upDownState != null and upDownState != ''">
            and t1.up_down_state = #{upDownState}
        </if>
        <!--
          如果方法参数Product对象的isOverDate属性值为1(查询已过期商品),则查询
          当前时间大于product表中supp_date列的时间的商品;
          反之如果方法参数Product对象的isOverDate属性值为0(查询未过期商品),则
          查询当前时间小于product表中supp_date列的时间的商品;
        -->
        <if test="isOverDate != null and isOverDate != '' and isOverDate==1">
            and date_format(now(), '%y-%m-%d') &gt; t1.supp_date
        </if>
        <if test="isOverDate != null and isOverDate != '' and isOverDate==0">
            and date_format(now(), '%y-%m-%d') &lt; t1.supp_date
        </if>
    </select>

    <!--
      //分页查询商品的方法
      public List<Product> selectProductPage(@Param("page") Page page, @Param("product") Product product)
    -->
    <select id="selectMaterialPage" resultType="com.bobochang.warehouse.entity.Material">
        select t1.*, t2.store_name
        from
        material t1, store t2, supply t3, material_supply t4, supply t5
        where t1.store_id = t2.store_id
        <if test="material.storeId != null">
            and t1.store_id = #{product.storeId}
        </if>
        <if test="material.materialName != null and material.materialName != ''">
            and t1.material_name like concat('%',#{material.materialName},'%')
        </if>
        order by t1.create_time
        limit #{page.limitIndex}, #{page.pageSize}
    </select>

    <!--
      //添加商品的方法
      public int insertProduct(Product product)
    -->
    <insert id="insertProduct">
        insert into product values
            (
                null, #{storeId}, #{brandId}, #{productName}, #{productNum},
                #{productInvent}, #{typeId}, #{supplyId}, #{placeId}, #{unitId},
                #{introduce}, 0, #{inPrice}, #{salePrice}, #{memPrice}, now(),
                null, #{createBy}, null, #{imgs}, #{productDate}, #{suppDate}
            )
    </insert>

    <!--
      //根据商品id修改商品的上下架状态
      public int updateStateById(Product product)
    -->
    <update id="updateStateById">
        update product set up_down_state = #{upDownState}
        where product_id = #{productId}
    </update>

    <!--
      //根据商品id删除商品的方法
      public int deleteProductById(Integer productId)
    -->
    <delete id="deleteProductById">
        delete from product where product_id = #{productId}
    </delete>

    <!--
      //根据商品id修改商品的方法
      public int updateProductById(Product product)
    -->
    <update id="updateProductById">
        <!--商品上下架状态、创建时间、创建者字段值不用改-->
        update product set store_id = #{storeId}, brand_id = #{brandId},
        product_name = #{productName}, product_num = #{productNum},
        product_invent = #{productInvent}, type_id = #{typeId},
        supply_id = #{supplyId}, place_id = #{placeId}, unit_id = #{unitId},
        introduce = #{introduce}, in_price = #{inPrice}, sale_price = #{salePrice},
        mem_price = #{memPrice}, update_time = now(), update_by = #{updateBy},
        imgs = #{imgs}, product_date = #{productDate}, supp_date = #{suppDate}
        where product_id = #{productId}
    </update>

    <!--
      //根据商品id增加商品库存的方法
      public int addInventById(Integer productId, Integer invent)
    -->
    <update id="addInventById">
        update product set
            product_invent = product_invent + #{param2}
        where product_id = #{param1}
    </update>

    <!--
      //根据商品id查询商品的方法
      public Product selectProductById(Integer productId)
    -->
    <select id="selectProductById" resultType="com.bobochang.warehouse.entity.Product">
        select * from product where product_id = #{productId}
    </select>
</mapper>
